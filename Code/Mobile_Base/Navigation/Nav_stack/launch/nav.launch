<!-- Launch file for the navigation with the Grabby warehouse robot -->

<launch>

    <!-- //_____________// Transformation Configuration //_____________// -->
    <node pkg="tf" type="static_transform_publisher" name="base_link_to_laser" args="0.06 0 0.08 3.1416 0 0 base_link laser 30" />
    <!-- <node pkg="tf" type="static_transform_publisher" name="base_link_to_laser" args="0.06 0 0.08 3.1416 0 3.1416 base_link laser 30" /> -->
    <node pkg="tf" type="static_transform_publisher" name="imu_broadcaster" args="0.1175 0.095 -0.045 0 0 0 base_link imu 30" />
    <node pkg="tf" type="static_transform_publisher" name="base_link_broadcaster" args="0 0 0.09 0 0 0 base_footprint base_link 30" />
    <!-- odom to base_footprint transform will be provided by the robot_pose_ekf node -->
    <!-- <node pkg="tf" type="static_transform_publisher" name="odom_to_base_footprint" args="0 0 0 0 0 0 odom base_footprint 30" />  -->
    <!-- map to odom will be provided by the AMCL -->
    <node pkg="tf" type="static_transform_publisher" name="map_to_odom" args="0 0 0 0 0 0 map odom 30" />

    <!-- //_____________// Wheel Encoder Tick Publisher and Base Controller Using Arduino //_____________// -->
    <!-- Declare an argument for the serial port of the Arduino with a default value -->
    <arg name="serial_port_arduino" default="/dev/ttyUSB0"/>

    <!-- Needs the motor_controller_diff_drive_2.ino on the Arduino -->
    <!-- Subscribe: /cmd_vel -->
    <!-- Publish: /right_ticks, /left_ticks -->
    <node pkg="rosserial_python" type="serial_node.py" name="serial_node">
        <param name="port" value="$(arg serial_port_arduino)"/>
        <param name="baud" value="115200"/>
    </node>

    <!-- //_____________// Odometry launch //_____________// -->
    <!-- Launch wheel odometry node -->
    <!-- Subscribe: /m1_ticks, /m2_ticks, /initial_2d -->
    <!-- Publish: /odom_data_euler, /odom -->
    <node pkg="localization_data_pub" type="ekf_odom_pub" name="ekf_odom_pub" />

    <!-- IMU Data Publisher using the MPU6050 -->
    <!-- Publish: /imu_data -->
    <node pkg="mpu6050_custom_driver" type="mpu6050_publisher.py" name="mpu6050_node" />

    <!-- Extended Kalman Filter from robot_pose_ekf Node-->
    <!-- Subscribe: /odom, /imu_data, /vo -->
    <!-- Publish: /robot_pose_ekf/odom_combined -->
    <node pkg="robot_pose_ekf" type="robot_pose_ekf" name="robot_pose_ekf">
        <param name="output_frame" value="odom"/>
        <param name="base_footprint_frame" value="base_footprint"/>
        <param name="freq" value="30.0"/>
        <param name="sensor_timeout" value="1.0"/>
        <param name="odom_used" value="true"/>
        <param name="imu_used" value="true"/>
        <param name="vo_used" value="false"/>
        <param name="gps_used" value="false"/>
        <param name="debug" value="false"/>
        <param name="self_diagnose" value="false"/>
    </node>

    <!-- //_____________// Mapping Information //_____________// -->
    <!-- Initial Pose and Goal Publisher -->
    <!-- Publish: /initialpose, /move_base_simple/goal -->
    <!-- Load preconfigured RVIZ interface -->
    <node pkg="rviz" type="rviz" name="rviz" args="-d $(find navstack_pub)/rviz/rviz_navigation.rviz" />

    <!-- Subscribe: /initialpose, /move_base_simple/goal -->
    <!-- Publish: /initial_2d, /goal_2d --> 
    <node pkg="localization_data_pub" type="rviz_click_to_2d" name="rviz_click_to_2d" />

    <!-- //_____________// LiDAR Launch //_____________// -->
    <!-- Declare an argument for the serial port of the LiDAR with a default value -->
    <arg name="serial_port_lidar" default="/dev/ttyUSB1"/>

    <!-- Start RPLIDAR sensor node which provides LaserScan data -->
    <!-- Publish: /scan -->
    <node name="rplidarNode" type="rplidarNode" pkg="rplidar_ros" output="screen">
        <param name="serial_port" type="string" value="$(arg serial_port_lidar)"/>
        <!-- Baudrate for A1 LiDAR is 115200 -->
        <param name="serial_baudrate" type="int" value="115200"/> 
        <param name="frame_id" type="string" value="laser"/>
        <param name="inverted" type="bool" value="false"/>
        <param name="angle_compensate" type="bool" value="true"/>
        <param name="inverted" type="bool" value="true"/>
        <!-- <param name="inverted" type="bool" value="true"/> -->
    </node> 

    <!-- Map File -->
    <arg name="map_file" default="/home/julius_robo3/Navigation/maps/ros_maps/dolines/dolines_map.yaml"/>

    <!-- Map Server -->
    <!-- Publish: /map, /map_metadata -->
    <node pkg="map_server" name="map_server" type="map_server" args="$(arg map_file)" />

    <!-- //_____________// AMCL Configuration //_____________// -->
    <!-- Add AMCL example for differential drive robots for Localization -->
    <!-- Subscribe: /scan, /tf, /initialpose, /map -->
    <!-- Publish: /amcl_pose, /particlecloud, /tf -->
    <include file="$(find amcl)/examples/amcl_diff.launch"/>

    <!-- //_____________// Move Base Node //_____________// -->
    <!-- Subscribe: /move_base_simple/goal -->
    <!-- Publish: /cmd_vel -->
    <node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen">
        <rosparam file="$(find navstack_pub)/param/costmap_common_params.yaml" command="load" ns="global_costmap" />
        <rosparam file="$(find navstack_pub)/param/costmap_common_params.yaml" command="load" ns="local_costmap" />
        <rosparam file="$(find navstack_pub)/param/local_costmap_params.yaml" command="load" ns="local_costmap" />
        <rosparam file="$(find navstack_pub)/param/global_costmap_params.yaml" command="load" ns="global_costmap" />
        <rosparam file="$(find navstack_pub)/param/base_local_planner_params.yaml" command="load" />
    </node>


</launch>
